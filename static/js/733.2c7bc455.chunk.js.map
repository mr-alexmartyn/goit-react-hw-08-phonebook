{"version":3,"file":"static/js/733.2c7bc455.chunk.js","mappings":"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","sources":["Components/Filter/Filter.jsx","Components/ContactListItem/ContactListItem.jsx","Components/ContactList/ContactList.jsx","Components/ContactForm/ContactForm.jsx","views/ContactsView.jsx"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/FilterSlice';\nimport { Stack, Input } from '@chakra-ui/react';\n\nfunction Filter() {\n  const dispatch = useDispatch();\n  const filterValue = useSelector(state => state.filter);\n\n  const onFilterChange = event => {\n    const { value } = event.currentTarget;\n    dispatch(setFilter(value.toLowerCase()));\n  };\n\n  return (\n    <Stack w=\"400px\" mx=\"auto\" my=\"6\" spacing={4}>\n      <p>Find contacts by name</p>\n      <Input\n        onChange={onFilterChange}\n        value={filterValue}\n        type=\"text\"\n        name=\"filter\"\n      />\n    </Stack>\n  );\n}\n\nexport default Filter;\n","import { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { Flex, Box, Button } from '@chakra-ui/react';\nimport { useDeleteContactsMutation } from 'redux/ContactsApi';\n\nfunction ContactListItem({ name, number, id }) {\n  const [deleteContacts, { isLoading: isDeleting, isSuccess, error }] =\n    useDeleteContactsMutation();\n\n  useEffect(() => {\n    if (isSuccess) {\n      toast.info(`${name} was removed from the phone book`);\n    }\n    if (error) {\n      toast.error('oops something went wrong');\n    }\n  }, [isSuccess, name, error]);\n\n  return (\n    <Box key={id} mb=\"5\">\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" w=\"400px\" mb=\"5\">\n        {name}: {number}\n        <Button\n          colorScheme=\"blue\"\n          type=\"button\"\n          onClick={() => deleteContacts(id)}\n          disabled={isDeleting}\n        >\n          {isDeleting ? 'Delete...' : 'Delete'}\n        </Button>\n      </Flex>\n    </Box>\n  );\n}\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default ContactListItem;\n","import { useSelector } from 'react-redux';\nimport { useGetContactQuery } from 'redux/ContactsApi';\nimport ContactListItem from 'Components/ContactListItem';\nimport { Spinner } from '@chakra-ui/react';\n\nfunction ContactList() {\n  const { data, isFetching } = useGetContactQuery();\n  const filter = useSelector(state => state.filter);\n\n  const contacts =\n    data && data.filter(contact => contact.name.toLowerCase().includes(filter));\n\n  return (\n    <>\n      {data && data.length !== 0 && (\n        <ul>\n          {contacts.length !== 0 ? (\n            contacts.map(contact => (\n              <ContactListItem key={contact.id} {...contact} />\n            ))\n          ) : (\n            <p>no search contacts: {filter}</p>\n          )}\n        </ul>\n      )}\n      {data && data.length === 0 && <p>'You have no contacts'</p>}\n      {isFetching && (\n        <Spinner\n          thickness=\"4px\"\n          speed=\"0.65s\"\n          emptyColor=\"gray.200\"\n          color=\"blue.500\"\n          size=\"xl\"\n        />\n      )}\n    </>\n  );\n}\n\nexport default ContactList;\n","import { useState, useEffect } from 'react';\nimport { useAddContactsMutation, useGetContactQuery } from 'redux/ContactsApi';\nimport { toast } from 'react-toastify';\nimport { Stack, Input, Button } from '@chakra-ui/react';\n\nfunction ContactForm() {\n  const [addContacts, { isLoading, isSuccess, error }] =\n    useAddContactsMutation();\n  const { data } = useGetContactQuery();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const [nameForToast, setnameForToast] = useState('');\n\n  useEffect(() => {\n    isSuccess &&\n      toast.success(` ${nameForToast} added to contact book`, {\n        autoClose: 800,\n      });\n    error && toast.error('oops something went wrong');\n  }, [error, isSuccess, nameForToast]);\n\n  const handleInputChange = ({ currentTarget: { name, value } }) => {\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setnameForToast(name);\n    data.every(item => item.name.toLowerCase() !== name.toLowerCase())\n      ? addContacts({\n          name: name,\n          number: number,\n        })\n      : toast.error(`${name} is alredy in contacts!!!`);\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form autoComplete=\"off\" onSubmit={handleSubmit}>\n      <Stack w=\"400px\" mx=\"auto\" my=\"6\" spacing={4}>\n        <p>Name</p>\n\n        <Input\n          onChange={handleInputChange}\n          value={name}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Jacob Mercer\"\n        />\n\n        <p>Number</p>\n        <Input\n          onChange={handleInputChange}\n          value={number}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"111-111-11-11\"\n        />\n        <Button\n          colorScheme=\"blue\"\n          type=\"submit\"\n          disabled={number && name ? false : true}\n        >\n          {isLoading ? 'Add Contact...Spiner' : 'Add Contact'}\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n\nexport default ContactForm;\n","import React from 'react';\nimport { Navigate } from 'react-router-dom';\nimport Filter from 'Components/Filter';\nimport ContactList from 'Components/ContactList';\nimport ContactForm from 'Components/ContactForm';\nimport { Heading } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport { getLoggedin } from 'redux/AuthSlise';\nimport { Box } from '@chakra-ui/react';\n\nfunction ContactsView(props) {\n  const isLogdedin = useSelector(getLoggedin);\n  return (\n    <Box w=\"400px\" mx=\"auto\" my=\"6\">\n      {!isLogdedin && <Navigate to=\"/\" replace={true} />}\n      <Heading mb={5}>Phonebook</Heading>\n      <ContactForm />\n      <Heading mb={5}>Contacts</Heading>\n      <Filter />\n      <ContactList />\n    </Box>\n  );\n}\n\nexport default ContactsView;\n"],"names":["dispatch","useDispatch","filterValue","useSelector","state","filter","w","mx","my","spacing","onChange","event","value","currentTarget","setFilter","toLowerCase","type","name","number","id","useDeleteContactsMutation","deleteContacts","isDeleting","isLoading","isSuccess","error","useEffect","toast","mb","alignItems","justifyContent","colorScheme","onClick","disabled","useGetContactQuery","data","isFetching","contacts","contact","includes","length","map","thickness","speed","emptyColor","color","size","useAddContactsMutation","addContacts","useState","setName","setNumber","nameForToast","setnameForToast","autoClose","handleInputChange","autoComplete","onSubmit","e","preventDefault","every","item","pattern","title","required","placeholder","props","isLogdedin","getLoggedin","to","replace"],"sourceRoot":""}